glimpse(meteo_2015_2016)
head(meteo_2015_2016)
summary(meteo_2015_2016)
glimpse(test_meteo_2017)
meteo_train_var <- names(meteo_2015_2016)
meteo_test_var <- names(test_meteo_2017)
all.equal.character(meteo_train_var, meteo_test_var)
rm(meteo_train_var)
rm(meteo_test_var)
registers_by_year <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
registers_by_year
rm(registers_by_year)
registers_by_year_month <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime),
month = month(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
kable(registers_by_year_month)
registers_by_year_month <- registers_by_year_month %>%
ungroup() %>%
add_row(year = c('2015', '2016', '2016'),
month = c('12', '4', '5'),
registers = '0') %>%
mutate(year = as.factor(year),
month = as.factor(month),
registers = as.numeric(registers))
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10)) +
labs(x = 'Year-Month')
rm(registers_by_year_month)
summary(registers_by_year_month_1)
ggplot(data = registers_by_year_month_1, aes(x = registers)) +
geom_histogram(bins = 23)
rm(registers_by_year_month_1)
register_frequency <- prod_2015_2016 %>%
select(Datetime) %>%
arrange(Datetime) %>% # Importante. Antes hay que ordenar los registros por Datetime.
mutate(Datetime_lagged = lag(Datetime)) %>%
mutate(time_diff = Datetime - Datetime_lagged) %>%
na.omit()
intervals_count <- register_frequency %>%
select(time_diff) %>%
group_by(time_diff) %>%
summarise(n = n()) %>%
arrange(desc(n))
kable(head(intervals_count, 20))
(two_year_minutes <- 2*365*24*60)
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1,
time_diff < 900) # En 2019 el día más largo del año en Faro será el 21 de junio con 14 horas y 42 minutos (asi que filtramos por debajo de 15 horas)
summary(stops$time_diff)
ggplot(data = stops, aes(x = time_diff)) +
geom_histogram(bins = 23)
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 500) %>%
summarise(stops = sum(n))
night_stops
rm(stops, night_stops, intervals_count)
data_nas <- prod_2015_2016 %>%
group_by(year = year(Datetime), month(Datetime)) %>%
summarise_all(funs(round(sum(!is.na(.))/n(), 2))) # We obtain the proportion of 'not NAs'
glimpse(prod_2015_2016)
prod_2015_2016_long <- prod_2015_2016 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure)
kable(head(prod_2015_2016_long, 10))
summary(prod_2015_2016_long)
prod_2015_2016_long <- prod_2015_2016_long %>%
spread(measure, value)
kable(head(prod_2015_2016_long))
test_prod_2017_long <- test_prod_2017 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure) %>%
spread(measure, value)
set.seed = 42
sample_prod <- sample_n(prod_2015_2016_long, 10000)
ggpairs(data = sample_prod, columns = 4:7)
glimpse(prod_2015_2016_long)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Temperature_DC_C, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
prod_optimal_A <- sample_prod %>%
filter(set_type == "Optimal",
panel_type == "A")
ggpairs(data = prod_optimal_A, columns = 4:7)
prod_optimal_B <- sample_prod %>%
filter(set_type == "Optimal",
panel_type == "B")
ggpairs(data = prod_optimal_B, columns = 4:7)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
minute_evolution_W_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Power_DC_W)) + geom_line()
minute_evolution_W_A
minute_evolution_A_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Current_DC_A)) + geom_line()
minute_evolution_V_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Voltage_DC_V)) + geom_line()
minute_evolution_C_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Temperature_DC_C)) + geom_line()
grid.arrange(minute_evolution_W_A,
minute_evolution_A_A,
minute_evolution_V_A,
minute_evolution_C_A,
ncol = 1)
train_period_A <- prod_2015_2016_long %>%
filter(datetime <= '2016-09-30 23:59:59',
panel_type == "A",
set_type == "Optimal") %>%
select(-panel_type,
-set_type) %>%
na.omit()
validation_period_A <- prod_2015_2016_long %>%
filter(datetime > '2016-09-30 23:59:59',
panel_type == "A",
set_type == "Optimal") %>%
select(-panel_type,
-set_type) %>%
na.omit()
head(train_period_A)
model_lr_1 <- lm(data = train_period_A, Power_DC_W ~ Current_DC_A + Temperature_DC_C + Voltage_DC_V)
print(model_lr_1)
summary(model_lr_1)
# Extraemos los fitted_values (las predicciones) del modelo para compararlos con los valores reales
predicted_values <- as.data.frame(model_lr_1$fitted.values)
real_values <- as.data.frame(train_period_A$Power_DC_W)
mae_train <- bind_cols(predicted_values,
real_values) %>%
rename(predicted_values = 'model_lr_1$fitted.values',
real_values = 'train_period_A$Power_DC_W') %>%
mutate(abs_error = abs(real_values - predicted_values)) %>%
summarise(mae = mean(abs_error))
mae_train
validation_predicted_values <- as.data.frame(predict(model_lr_1, validation_period_A))
validation_real_values <- as.data.frame(validation_period_A$Power_DC_W)
mae_validation <- bind_cols(validation_predicted_values,
validation_real_values) %>%
rename(predicted_values = 'predict(model_lr_1, validation_period_A)',
real_values = 'validation_period_A$Power_DC_W') %>%
mutate(abs_error = abs(real_values - predicted_values)) %>%
summarise(mae = mean(abs_error))
mae_validation
rss <- sum((validation_predicted_values - validation_real_values) ^ 2)  ## residual sum of squares
tss <- sum((validation_real_values - mean(validation_real_values$`validation_period_A$Power_DC_W`)) ^ 2)  ## total sum of squares
R_Squared <- 1 - rss/tss
R_Squared
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
minute_evolution_A_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Current_DC_A)) + geom_line()
minute_evolution_V_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Voltage_DC_V)) + geom_line()
minute_evolution_C_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Temperature_DC_C)) + geom_line()
grid.arrange(minute_evolution_W_A,
minute_evolution_A_A,
minute_evolution_V_A,
minute_evolution_C_A,
ncol = 1)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
View(prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>% # Seleccionamos las variables necesarias
mutate(W_prediction = Current_DC_A * Voltage_DC_V,
abs_error = abs(W_prediction - Power_DC_W)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = abs(W_prediction - Power_DC_W))  # Los errores
View(pred_prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = abs(W_prediction - Power_DC_W))  # Los errores
View(pred_prod_optimal_A)
MAE <- mean(pred_prod_optimal_A$abs_error)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = abs(W_prediction - Power_DC_W))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
MAE <- round(mean(pred_prod_optimal_A$abs_error))
MAE
MAE <- round(mean(pred_prod_optimal_A$abs_error), 4)
MAE
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = round(abs(W_prediction - Power_DC_W)))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
View(pred_prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = round(abs(W_prediction - Power_DC_W)), 6)  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
View(pred_prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = round(abs(W_prediction - Power_DC_W), 6))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
View(pred_prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = round(abs(W_prediction - Power_DC_W)))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = abs(W_prediction - Power_DC_W))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W), 6)  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W), 6))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
View(pred_prod_optimal_A)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W), 6))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
MAE
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W), 6))
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A") %>%
na.omit()
pred_prod_optimal_A <- prod_optimal_A %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W),6))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
prod_optimal_AB<- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "B") %>%
na.omit()
pred_prod_optimal_B <- prod_optimal_B %>%
select(Current_DC_A, Voltage_DC_V, Power_DC_W) %>%
mutate(W_prediction = Current_DC_A * Voltage_DC_V, # Nuestro modelo
abs_error = trunc(abs(W_prediction - Power_DC_W),6))  # Los errores
# Y para calcular el MAE  de nuestro modelo lo único que nos queda por hacer
# es obtener la media de la columna abs_error
MAE <- mean(pred_prod_optimal_A$abs_error)
MAE
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
minute_evolution_A_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Current_DC_A)) + geom_line()
minute_evolution_V_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Voltage_DC_V)) + geom_line()
minute_evolution_C_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Temperature_DC_C)) + geom_line()
grid.arrange(minute_evolution_W_A,
minute_evolution_A_A,
minute_evolution_V_A,
minute_evolution_C_A,
ncol = 1)
ggplot(data = sample_prod, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
prod_optimal_B <- sample_prod %>%
filter(set_type == "Optimal",
panel_type == "B")
ggpairs(data = prod_optimal_B, columns = 4:7)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
minute_evolution_W_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Power_DC_W)) + geom_line()
minute_evolution_A_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Current_DC_A)) + geom_line()
minute_evolution_V_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Voltage_DC_V)) + geom_line()
minute_evolution_C_A <- ggplot(data = prod_optimal_A %>% filter(datetime > '2016-09-30 23:59:59',
datetime <= '2016-10-10 23:59:59'), aes(x = datetime, y = Temperature_DC_C)) + geom_line()
grid.arrange(minute_evolution_W_A,
minute_evolution_A_A,
minute_evolution_V_A,
minute_evolution_C_A,
ncol = 1)
train_period_A <- prod_2015_2016_long %>%
filter(datetime <= '2016-09-30 23:59:59',
panel_type == "A",
set_type == "Optimal") %>%
select(-panel_type,
-set_type) %>%
na.omit()
meteo_2015 <- read_delim(file = "./data/hackathon_data/train/sunlab-faro_meteo_2015.xls.csv", delim = ";")
library(tidyverse)
library(readxl)
library(VIM)
library(GGally)
meteo_2015 <- read_delim(file = "./data/hackathon_data/train/sunlab-faro_meteo_2015.xls.csv", delim = ";")
View(meteo_2015)
meteo_2015 <- read_csv(file = "./data/hackathon_data/train/sunlab-faro_meteo_2015.xls.csv")
View(meteo_2015)
meteo_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2015.xls.csv")
library(tidyverse)
library(readxl)
library(VIM)
library(GGally)
meteo_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2015.xls.csv")
meteo_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2015.csv")
meteo_2016 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2016.csv")
prod_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro-pv-2015.csv")
prod_2016 <- read_csv("./data/hackathon_data/train/sunlab-faro-pv-2016.csv")
meteo_2015_2016 <- bind_rows(meteo_2015, meteo_2016)
prod_2015_2016 <- bind_rows(prod_2015, prod_2016)
# Borramos los archivos originales
rm(meteo_2015)
rm(meteo_2016)
rm(prod_2015)
rm(prod_2016)
summary(prod_2015_2016)
glimpse(prod_2015_2016)
summary(meteo_2015_2016)
meteo_2015_2016_final <- meteo_2015_2016 %>%
select(Datetime,
'Ambient Temperature [ºC]',
'Diffuse Radiation [W/m2]',
'Ultraviolet [W/m2]',
'Global Radiation [W/m2]')
tabla_final <- meteo_2015_2016_final %>%
left_join(prod_2015_2016_final, by = Datetime)
prod_2015_2016_final <- prod_2015_2016 %>%
select(Datetime,
'A_Optimal - Power DC [W]',
'B_Optimal - Power DC [W]')
tabla_final <- meteo_2015_2016_final %>%
left_join(prod_2015_2016_final, by = Datetime)
tabla_final <- meteo_2015_2016_final %>%
left_join(prod_2015_2016_final, by = 'Datetime')
summary(tabla_final)
summary(tabla_final$`Ambient Temperature [ºC]`)
hist(tabla_final$`Ambient Temperature [ºC]`)
tabla_final <- tabla_final %>%
filter(`Ambient Temperature [ºC]` > -100)
summary(tabla_final)
test_meteo_2017 <- read_csv("./data/hackathon_data/test-sunlab-meteo-2017.csv")
test_meteo_2017 <- read_csv("./data/hackathon_data/test/test-sunlab-meteo-2017.csv")
test_prod_2017 <- read_csv("./data/hackathon_data/test/test-sunlab-pv-2017.csv")
tabla_final_test <- test_meteo_2017 %>%
left_join(test_prod_2017, by = "Datetime") %>%
select(`A_Optimal - Power DC [W]`,
`Global Radiation [W/m2]`,
`Ultraviolet [W/m2]`)
write_csv(tabla_final_test, "test_meteo_prod_2017.csv")
library(tidyverse)
library(readxl)
library(VIM)
library(GGally)
meteo_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2015.csv")
meteo_2016 <- read_csv("./data/hackathon_data/train/sunlab-faro_meteo_2016.csv")
prod_2015 <- read_csv("./data/hackathon_data/train/sunlab-faro-pv-2015.csv")
prod_2016 <- read_csv("./data/hackathon_data/train/sunlab-faro-pv-2016.csv")
meteo_2015_2016 <- bind_rows(meteo_2015, meteo_2016)
prod_2015_2016 <- bind_rows(prod_2015, prod_2016)
# Borramos los archivos originales
rm(meteo_2015)
rm(meteo_2016)
rm(prod_2015)
rm(prod_2016)
summary(prod_2015_2016)
glimpse(prod_2015_2016)
prod_2015_2016_final <- prod_2015_2016 %>%
select(Datetime,
'A_Optimal - Power DC [W]',
'B_Optimal - Power DC [W]')
summary(meteo_2015_2016)
meteo_2015_2016_final <- meteo_2015_2016 %>%
select(Datetime,
'Ambient Temperature [ºC]',
'Diffuse Radiation [W/m2]',
'Ultraviolet [W/m2]',
'Global Radiation [W/m2]')
tabla_final <- meteo_2015_2016_final %>%
left_join(prod_2015_2016_final, by = 'Datetime')
summary(tabla_final)
tabla_final <- tabla_final %>%
filter(`Ambient Temperature [ºC]` > -100)
summary(tabla_final)
write_csv(tabla_final, "meteo_prod_2015_2016.csv")
test_meteo_2017 <- read_csv("./data/hackathon_data/test/test-sunlab-meteo-2017.csv")
test_prod_2017 <- read_csv("./data/hackathon_data/test/test-sunlab-pv-2017.csv")
tabla_final_test <- test_meteo_2017 %>%
left_join(test_prod_2017, by = "Datetime") %>%
select(`A_Optimal - Power DC [W]`,
`Global Radiation [W/m2]`,
`Ultraviolet [W/m2]`)
write_csv(tabla_final_test, "test_meteo_prod_2017.csv")
