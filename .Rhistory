select(-panel_type,
-set_type) %>%
na.omit()
validation_predicted_values <- as.data.frame(predict(model_lr_1, validation_period_A))
validation_real_values <- as.data.frame(validation_period_A$Power_DC_W)
mae_validation <- bind_cols(validation_predicted_values,
validation_real_values) %>%
rename(predicted_values = 'predict(model_lr_1, validation_period_A)',
real_values = 'validation_period_A$Power_DC_W') %>%
mutate(abs_error = abs(real_values - predicted_values)) %>%
summarise(mae = mean(abs_error))
mae_validation
rss <- sum((validation_predicted_values - validation_real_values) ^ 2)  ## residual sum of squares
tss <- sum((validation_real_values - mean(validation_real_values, na.rm = TRUE) ^ 2)  ## total sum of squares
R_Squared <- 1 - rss/tss
View(validation_real_values)
summary(validation_real_values)
tss <- sum((validation_real_values - mean(validation_real_values) ^ 2)  ## total sum of squares
R_Squared
tss
rss <- sum((validation_predicted_values - validation_real_values) ^ 2)  ## residual sum of squares
tss <- sum((validation_real_values - mean(validation_real_values)) ^ 2)  ## total sum of squares
R_Squared <- 1 - rss/tss
R_Squared
tss
rss
mean(validation_real_values)
rss <- sum((validation_predicted_values - validation_real_values) ^ 2)  ## residual sum of squares
tss <- sum((validation_real_values - mean(validation_real_values$`validation_period_A$Power_DC_W`)) ^ 2)  ## total sum of squares
R_Squared <- 1 - rss/tss
R_Squared
220/60
View(train_period_A)
prueba <- train_period_A %>% mutate(relacion = Power_DC_W / Current_DC_A)
View(prueba)
prueba <- train_period_A %>% mutate(power = Current_DC_A * Voltage_DC_V)
model_lr_2 <- lm(data = train_period_A, Power_DC_W ~ Current_DC_A + Voltage_DC_V)
print(model_lr_2)
summary(model_lr_2)
glimpse(prod_2015_2016_long)
ggpairs(data = prod_2015_2016_long,
columns = 2:5)
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, Power_DC_W) +
geom_point()
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, y = Power_DC_W) +
geom_point()
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, y = Power_DC_W)) +
geom_point()
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point()
ggplot(data = prod_2015_2016_semi_long, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point()
sample_prod <- sample_n(prod_2015_2016_semi_long, 10000)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point()
sample_prod <- sample_n(prod_2015_2016_semi_long, 100000)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point()
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point() +
facet_grid(~panel_type)
ggplot(data = prod_2015_2016_semi_long, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point() +
facet_grid(~set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point() +
facet_grid(~set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point() +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(hue = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(hue = 0.2) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.2) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
bash
glimpse(meteo_2015_2016)
library(tidyverse)
library(lubridate)
library(readxl)
library(VIM)
library(GGally)
library(caret)
meteo_2015 <- read_delim(file = "./data/train/sunlab-faro_meteo_2015.csv", delim = ";")
meteo_2016 <- read_delim(file = "./data/train/sunlab-faro-meteo-2016.csv", delim = ";")
prod_2015 <- read_delim(file = "./data/train/sunlab-faro-pv-2015.csv", delim = ";")
prod_2016 <- read_delim(file = "./data/train/sunlab-faro-pv-2016.csv", delim = ";")
test_meteo_2017 <- read_xlsx(path = "./data/test/test-sunlab-meteo-2017.xlsx")
test_prod_2017 <- read_xlsx(path = "./data/test/test-sunlab-pv-2017.xlsx")
meteo_2015_2016 <- bind_rows(meteo_2015, meteo_2016)
prod_2015_2016 <- bind_rows(prod_2015, prod_2016)
rm(meteo_2015)
rm(meteo_2016)
rm(prod_2015)
rm(prod_2016)
glimpse(prod_2015_2016)
head(prod_2015_2016, 10)
glimpse(meteo_2015_2016)
summary(prod_2015_2016)
head(meteo_2015_2016)
summary(meteo_2015_2016)
glimpse(test_prod_2017)
prod_train_var <- names(prod_2015_2016)
prod_test_var <- names(test_prod_2017)
all.equal.character(prod_train_var, prod_test_var)
glimpse(test_meteo_2017)
meteo_train_var <- names(meteo_2015_2016)
meteo_test_var <- names(test_meteo_2017)
all.equal.character(meteo_train_var, meteo_test_var)
kable(registers_by_year_month)
library(knitr)
kable(registers_by_year_month)
registers_by_year_month <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime),
month = month(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
kable(registers_by_year_month)
kable(registers_by_year_month, booktabs = TRUE)
registers_by_year_month <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime),
month = month(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
kable(registers_by_year_month)
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme_minimal(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10))
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme_minimal()
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10))
register_frequency <- prod_2015_2016 %>%
select(Datetime) %>%
arrange(Datetime) %>% # Importante. Antes hay que ordenar los registros por Datetime.
mutate(Datetime_lagged = lag(Datetime)) %>%
mutate(time_diff = Datetime - Datetime_lagged) %>%
na.omit()
intervals_count <- register_frequency %>%
select(time_diff) %>%
group_by(time_diff) %>%
summarise(n = n()) %>%
arrange(desc(n))
kable(head(intervals_count, 20))
library(tidyverse)
library(lubridate)
library(readxl)
library(VIM)
library(GGally)
library(caret)
library(knitr)
meteo_2015 <- read_delim(file = "./data/train/sunlab-faro_meteo_2015.csv", delim = ";")
meteo_2016 <- read_delim(file = "./data/train/sunlab-faro-meteo-2016.csv", delim = ";")
prod_2015 <- read_delim(file = "./data/train/sunlab-faro-pv-2015.csv", delim = ";")
prod_2016 <- read_delim(file = "./data/train/sunlab-faro-pv-2016.csv", delim = ";")
meteo_2015_2016 <- bind_rows(meteo_2015, meteo_2016)
prod_2015_2016 <- bind_rows(prod_2015, prod_2016)
rm(meteo_2015)
rm(meteo_2016)
rm(prod_2015)
rm(prod_2016)
test_meteo_2017 <- read_xlsx(path = "./data/test/test-sunlab-meteo-2017.xlsx")
test_prod_2017 <- read_xlsx(path = "./data/test/test-sunlab-pv-2017.xlsx")
prod_train_var <- names(prod_2015_2016)
prod_test_var <- names(test_prod_2017)
all.equal.character(prod_train_var, prod_test_var)
meteo_train_var <- names(meteo_2015_2016)
meteo_test_var <- names(test_meteo_2017)
all.equal.character(meteo_train_var, meteo_test_var)
registers_by_year <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
registers_by_year
registers_by_year_month <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime),
month = month(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
kable(registers_by_year_month)
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10))
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10))
summary(registers_by_year_month_1)
ggplot(data = registers_by_year_month_1, aes(x = registers)) +
geom_histogram(bins = 23)
register_frequency <- prod_2015_2016 %>%
select(Datetime) %>%
arrange(Datetime) %>% # Importante. Antes hay que ordenar los registros por Datetime.
mutate(Datetime_lagged = lag(Datetime)) %>%
mutate(time_diff = Datetime - Datetime_lagged) %>%
na.omit()
intervals_count <- register_frequency %>%
select(time_diff) %>%
group_by(time_diff) %>%
summarise(n = n()) %>%
arrange(desc(n))
kable(head(intervals_count, 20))
intervals_count
2_year_minutes <- 2*365*24*60
two_year_minutes <- 2*365*24*60
two_year_minutes
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff))
View(intervals_count)
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 200) %>%
summarise(stops = sum(n))
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 200) %>%
summarise(stops = sum(n))
night_stops
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1)
summary(stops)
summary(stops$time_diff)
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 500) %>%
summarise(stops = sum(n))
night_stops
ggplot(data = stops, aes(x = time_diff)) +
geom_histogram(bins = 23)
142615 / 60
(142615 / 60 ) 24
(142615 / 60 ) /24
View(register_frequency)
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1,
time_diff < 2000)
summary(stops$time_diff)
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1,
time_diff < 6000)
summary(stops$time_diff)
15*60
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1,
time_diff < 900) # En 2019 el día más largo del año en Faro será el 21 de junio con 14 horas y 42 minutos (asi que filtramos por debajo de 15 horas)
summary(stops$time_diff)
ggplot(data = stops, aes(x = time_diff)) +
geom_histogram(bins = 23)
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 500) %>%
summarise(stops = sum(n))
night_stops
library(tidyverse)
library(lubridate)
library(readxl)
library(VIM)
library(GGally)
library(caret)
library(knitr)
meteo_2015 <- read_delim(file = "./data/train/sunlab-faro_meteo_2015.csv", delim = ";")
meteo_2016 <- read_delim(file = "./data/train/sunlab-faro-meteo-2016.csv", delim = ";")
prod_2015 <- read_delim(file = "./data/train/sunlab-faro-pv-2015.csv", delim = ";")
prod_2016 <- read_delim(file = "./data/train/sunlab-faro-pv-2016.csv", delim = ";")
meteo_2015_2016 <- bind_rows(meteo_2015, meteo_2016)
prod_2015_2016 <- bind_rows(prod_2015, prod_2016)
rm(meteo_2015)
rm(meteo_2016)
rm(prod_2015)
rm(prod_2016)
test_meteo_2017 <- read_xlsx(path = "./data/test/test-sunlab-meteo-2017.xlsx")
test_prod_2017 <- read_xlsx(path = "./data/test/test-sunlab-pv-2017.xlsx")
glimpse(prod_2015_2016)
head(prod_2015_2016, 10)
summary(prod_2015_2016)
glimpse(test_prod_2017)
prod_train_var <- names(prod_2015_2016)
prod_test_var <- names(test_prod_2017)
all.equal.character(prod_train_var, prod_test_var)
glimpse(meteo_2015_2016)
head(meteo_2015_2016)
summary(meteo_2015_2016)
glimpse(test_meteo_2017)
meteo_train_var <- names(meteo_2015_2016)
meteo_test_var <- names(test_meteo_2017)
all.equal.character(meteo_train_var, meteo_test_var)
registers_by_year <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
registers_by_year
registers_by_year_month <- prod_2015_2016 %>%
select(Datetime) %>%
group_by(year = year(prod_2015_2016$Datetime),
month = month(prod_2015_2016$Datetime)) %>%
summarise(registers = n())
kable(registers_by_year_month)
registers_by_year_month_1 <- registers_by_year_month %>%
mutate(day = "01") %>%
unite(year_month, year, month, day, sep = '-') %>%
mutate(year_month = ymd(year_month))
ggplot(data = registers_by_year_month_1, aes(x = as.factor(year_month), y = registers, group = 1)) +
geom_line() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size = 10))
summary(registers_by_year_month_1)
ggplot(data = registers_by_year_month_1, aes(x = registers)) +
geom_histogram(bins = 23)
register_frequency <- prod_2015_2016 %>%
select(Datetime) %>%
arrange(Datetime) %>% # Importante. Antes hay que ordenar los registros por Datetime.
mutate(Datetime_lagged = lag(Datetime)) %>%
mutate(time_diff = Datetime - Datetime_lagged) %>%
na.omit()
intervals_count <- register_frequency %>%
select(time_diff) %>%
group_by(time_diff) %>%
summarise(n = n()) %>%
arrange(desc(n))
kable(head(intervals_count, 20))
two_year_minutes <- 2*365*24*60
two_year_minutes
stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 1,
time_diff < 900) # En 2019 el día más largo del año en Faro será el 21 de junio con 14 horas y 42 minutos (asi que filtramos por debajo de 15 horas)
summary(stops$time_diff)
ggplot(data = stops, aes(x = time_diff)) +
geom_histogram(bins = 23)
night_stops <- intervals_count %>%
mutate(time_diff = as.numeric(time_diff)) %>%
filter(time_diff > 500) %>%
summarise(stops = sum(n))
night_stops
glimpse(prod_2015_2016)
prod_2015_2016_long_example <- prod_2015_2016 %>%
gather('panel_set_measure', 'value', 2:25)
head(prod_2015_2016_long_example, 10)
prod_2015_2016_long <- prod_2015_2016 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure)
head(prod_2015_2016_long, 10)
summary(prod_2015_2016_long)
test_prod_2017_long <- test_prod_2017 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure)
prod_2015_2016_semi_long <- prod_2015_2016_long %>%
spread(measure, value)
head(prod_2015_2016_semi_long)
test_prod_2017_semi_long <- test_prod_2017_long %>%
spread(measure, value)
head(test_prod_2017_semi_long)
sample_prod <- sample_n(prod_2015_2016_semi_long, 100000)
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point()
ggplot(data = sample_prod, aes(x = Current_DC_A, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
ggplot(data = sample_prod, aes(x = Voltage_DC_V, y = Power_DC_W, color = set_type)) +
geom_point()
train_period_A <- prod_2015_2016_semi_long %>%
filter(datetime <= '2016-09-30 23:59:59',
panel_type == "A",
set_type == "Optimal") %>%
select(-panel_type,
-set_type) %>%
na.omit()
validation_period_A <- prod_2015_2016_semi_long %>%
filter(datetime > '2016-09-30 23:59:59',
panel_type == "A",
set_type == "Optimal") %>%
select(-panel_type,
-set_type) %>%
na.omit()
head(train_period_A)
model_lr_1 <- lm(data = train_period_A, Power_DC_W ~ Current_DC_A + Temperature_DC_C + Voltage_DC_V)
print(model_lr_1)
summary(model_lr_1)
# Extraemos los fitted_values (las predicciones) del modelo para compararlos con los valores reales
predicted_values <- as.data.frame(model_lr_1$fitted.values)
real_values <- as.data.frame(train_period_A$Power_DC_W)
mae_train <- bind_cols(predicted_values,
real_values) %>%
rename(predicted_values = 'model_lr_1$fitted.values',
real_values = 'train_period_A$Power_DC_W') %>%
mutate(abs_error = abs(real_values - predicted_values)) %>%
summarise(mae = mean(abs_error))
mae_train
validation_predicted_values <- as.data.frame(predict(model_lr_1, validation_period_A))
validation_real_values <- as.data.frame(validation_period_A$Power_DC_W)
mae_validation <- bind_cols(validation_predicted_values,
validation_real_values) %>%
rename(predicted_values = 'predict(model_lr_1, validation_period_A)',
real_values = 'validation_period_A$Power_DC_W') %>%
mutate(abs_error = abs(real_values - predicted_values)) %>%
summarise(mae = mean(abs_error))
mae_validation
rss <- sum((validation_predicted_values - validation_real_values) ^ 2)  ## residual sum of squares
tss <- sum((validation_real_values - mean(validation_real_values$`validation_period_A$Power_DC_W`)) ^ 2)  ## total sum of squares
R_Squared <- 1 - rss/tss
R_Squared
prod_2015_2016_long_example <- prod_2015_2016 %>%
gather('panel_set_measure', 'value', 2:25)
head(prod_2015_2016_long_example, 10)
kable(head(prod_2015_2016_long, 10))
prod_2015_2016_long <- prod_2015_2016 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure)
kable(head(prod_2015_2016_long, 10))
View(prod_2015_2016_semi_long)
View(prod_2015_2016_long_example)
summary(prod_2015_2016_long)
prod_2015_2016_long <- prod_2015_2016_long %>%
spread(measure, value)
head(prod_2015_2016_long)
kable(head(prod_2015_2016_long))
test_prod_2017_long <- test_prod_2017 %>%
gather('panel_set_measure', 'value', 2:25) %>%
rename(datetime = Datetime) %>%
mutate(panel_type = as.factor(str_sub(panel_set_measure, start = 1, end = 1)),
set_type = as.factor(ifelse(grepl('Vertical', panel_set_measure), 'Vertical',
ifelse(grepl('Horizontal', panel_set_measure), 'Horizontal', 'Optimal'))),
measure = as.factor(ifelse(grepl('Temperature', panel_set_measure), 'Temperature_DC_C',
ifelse(grepl('Voltage', panel_set_measure), 'Voltage_DC_V',
ifelse(grepl('Power', panel_set_measure), 'Power_DC_W', 'Current_DC_A'))))) %>%
select(-panel_set_measure) %>%
spread(measure, value)
ggpairs(data = sample_prod)
View(sample_prod)
ggpairs(data = sample_prod, columns = 2:7)
ggpairs(data = sample_prod, columns = 4:7, color = set_type)
View(sample_prod)
ggpairs(data = sample_prod, columns = 4:7)
set.seed = 42
sample_prod <- sample_n(prod_2015_2016_semi_long, 100000)
ggpairs(data = sample_prod, columns = 4:7)
ggpairs(data = sample_prod, columns = 4:7, alpha = 0.2)
ggplot(data = sample_prod, aes(x = Temperature_DC_C, y = Power_DC_W, color = set_type)) +
geom_point(alpha = 0.5) +
facet_grid(panel_type ~ set_type)
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
prod_optimal_B <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "B")
prod_optimal_A <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "A")
ggpairs(data = prod_optimal_A, columns = 4:7)
prod_optimal_B <- prod_2015_2016_long %>%
filter(set_type == "Optimal",
panel_type == "B")
ggpairs(data = prod_optimal_B, columns = 4:7)
